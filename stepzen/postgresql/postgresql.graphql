type Comment {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  commentList: [Comment] @materializer(query: "getCommentUsingPost_id")
  created_at: DateTime
  id: ID!
  img: String
  subreddit: [Subreddit]
    @materializer(
      query: "getSubredditListById"
      arguments: [{ name: "id", field: "subreddit_id" }]
    )
  subreddit_id: ID
  title: String
  username: String
  voteList: [Vote] @materializer(query: "getVoteUsingPost_id")
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  comments: [Comment]
    @materializer(
      query: "getCommentByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
}

type Subreddit {
  created_at: DateTime
  id: ID!
  postList: [Post] @materializer(query: "getPostUsingSubreddit_id")
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  upvote: Boolean
  username: String
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "Post"
      ORDER BY "Post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostListByPostId(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "Post"
      WHERE "Post"."id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT *, "Post".id AS id FROM "Post"
      JOIN "Subreddit" ON "Subreddit"."id" = "Post"."subreddit_id"
      WHERE "Subreddit"."topic" = $1
      ORDER BY "Post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."post_id", T."text", T."username"
        FROM "public"."Comment" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getCommentByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "Comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteUsingPost_id(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."post_id", T."upvote", T."username"
        FROM "public"."Vote" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "Vote" where "post_id" = $1
      ORDER BY "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Subreddit"
      configuration: "postgresql_config"
    )
  getSubredditListByTopic(topic: String!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "Subreddit" WHERE "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getSubredditListById(id: ID!): [Subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "Subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    ) 
  getSubredditListLimit(limit: Int!): [Subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "Subreddit"
      ORDER BY "created_at" desc
      limit $1
      """
      configuration: "postgresql_config"
    ) 
  getSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Subreddit"
      configuration: "postgresql_config"
    )
  getPostUsingSubreddit_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."img", T."subreddit_id", T."title", T."username"
        FROM "public"."Post" T
        WHERE T."subreddit_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Vote"
      configuration: "postgresql_config"
    )
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Vote"
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertComment(
    post_id: ID!
    text: String!
    username: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String!
    img: String!
    subreddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    post_id: ID!
    upvote: Boolean!
    username: String!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
